// Package HQSys comment
// This file was generated by jce2go 2.0.0
// Generated from Common.jce
package HQSys

import (
	"fmt"

	"gitlab.upchinaproduct.com/taf/tafgo/taf/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

type E_CLI_COMP_TYPE int32

const (
	E_CLI_COMP_TYPE_E_CLI_NO_COMP         = 0
	E_CLI_COMP_TYPE_E_CLI_COMPRESS        = 1
	E_CLI_COMP_TYPE_E_CLT_LZMA_COMPRESS   = 2
	E_CLI_COMP_TYPE_E_CLT_LZ4_COMPRESS    = 3
	E_CLI_COMP_TYPE_E_CLT_SNAPPY_COMPRESS = 4
)

type E_HQ_PACKET_TYPE int32

const (
	E_HQ_PACKET_TYPE_E_HQ_NORMAL          = 0
	E_HQ_PACKET_TYPE_E_HQ_DIFF_PACKET     = 100
	E_HQ_PACKET_TYPE_E_HQ_LZ4_PACKET      = 101
	E_HQ_PACKET_TYPE_E_HQ_LZ4_DIFF        = 102
	E_HQ_PACKET_TYPE_E_HQ_LZMA_PACKET     = 103
	E_HQ_PACKET_TYPE_E_HQ_LZMA_DIFF       = 104
	E_HQ_PACKET_TYPE_E_HQ_SNAPPY_PACKET   = 105
	E_HQ_PACKET_TYPE_E_HQ_SNAPPY_DIFF     = 106
	E_HQ_PACKET_TYPE_E_HQ_GAP_DIFF_PACKET = 110
	E_HQ_PACKET_TYPE_E_HQ_LZ4_GAP_DIFF    = 112
	E_HQ_PACKET_TYPE_E_HQ_LZMA_GAP_DIFF   = 114
	E_HQ_PACKET_TYPE_E_HQ_SNAPPY_GAP_DIFF = 116
)

type HISTORY_DATA_TYPE int32

const (
	HISTORY_DATA_TYPE_HDT_DAY_KLINE        = 0
	HISTORY_DATA_TYPE_HDT_MIN1_KLINE       = 1
	HISTORY_DATA_TYPE_HDT_MIN5_KLINE       = 2
	HISTORY_DATA_TYPE_HDT_MIN15_KLINE      = 3
	HISTORY_DATA_TYPE_HDT_MIN30_KLINE      = 4
	HISTORY_DATA_TYPE_HDT_MIN60_KLINE      = 5
	HISTORY_DATA_TYPE_HDT_RTMIN            = 6
	HISTORY_DATA_TYPE_HDT_WEEK_KLINE       = 7
	HISTORY_DATA_TYPE_HDT_MONTH_KLINE      = 8
	HISTORY_DATA_TYPE_HDT_SEASON_KLINE     = 9
	HISTORY_DATA_TYPE_HDT_YEAR_KLINE       = 10
	HISTORY_DATA_TYPE_HDT_DAY_MONEYFLOW    = 11
	HISTORY_DATA_TYPE_HDT_TICK             = 12
	HISTORY_DATA_TYPE_HDT_WEEK_MONEYFLOW   = 13
	HISTORY_DATA_TYPE_HDT_MONTH_MONEYFLOW  = 14
	HISTORY_DATA_TYPE_HDT_SEASON_MONEYFLOW = 15
	HISTORY_DATA_TYPE_HDT_YEAR_MONEYFLOW   = 16
	HISTORY_DATA_TYPE_HDT_FLOW_MIN1        = 17
	HISTORY_DATA_TYPE_HDT_FLOW_MIN5        = 18
	HISTORY_DATA_TYPE_HDT_FLOW_MIN15       = 19
	HISTORY_DATA_TYPE_HDT_FLOW_MIN30       = 20
	HISTORY_DATA_TYPE_HDT_FLOW_MIN60       = 21
	HISTORY_DATA_TYPE_HDT_MIN120_KLINE     = 22
	HISTORY_DATA_TYPE_HDT_FLOW_MIN120      = 23
)

type E_MONEYFLOW_TYPE int32

const (
	E_MONEYFLOW_TYPE_E_MONEYFLOW_DOUBLE     = 0
	E_MONEYFLOW_TYPE_E_MONEYFLOW_INITIATIVE = 1
	E_MONEYFLOW_TYPE_E_MONEYFLOW_PASSIVE    = 2
	E_MONEYFLOW_TYPE_E_MONEYFLOW_DOUBLE_NEW = 3
)

type E_QX_MODE int32

const (
	E_QX_MODE_EQM_QX_NONE  = 0
	E_QX_MODE_EQM_QX_FRONT = 1
	E_QX_MODE_EQM_QX_BACK  = 2
)

type E_STOCK_TYPE_SUMMARAY int32

const (
	E_STOCK_TYPE_SUMMARAY_ESTS_ALL    = 0
	E_STOCK_TYPE_SUMMARAY_ESTS_STOCK  = 1
	E_STOCK_TYPE_SUMMARAY_ESTS_BLOCK  = 2
	E_STOCK_TYPE_SUMMARAY_ESTS_ZHISHU = 3
)

type E_BLOCK_TYPE int32

const (
	E_BLOCK_TYPE_EBT_BK_ALL = 0
	E_BLOCK_TYPE_EBT_BK_HY  = 22
	E_BLOCK_TYPE_EBT_BK_DQ  = 23
	E_BLOCK_TYPE_EBT_BK_GN  = 24
)

type E_STOCK_CATEGORY int32

const (
	E_STOCK_CATEGORY_STKC_SH_ZS          = 1
	E_STOCK_CATEGORY_STKC_SH_AG          = 2
	E_STOCK_CATEGORY_STKC_SH_BG          = 3
	E_STOCK_CATEGORY_STKC_SH_ZQ          = 4
	E_STOCK_CATEGORY_STKC_SZ_ZS          = 5
	E_STOCK_CATEGORY_STKC_SZ_AG          = 6
	E_STOCK_CATEGORY_STKC_SZ_BG          = 7
	E_STOCK_CATEGORY_STKC_SZ_ZQ          = 8
	E_STOCK_CATEGORY_STKC_SH_JJ          = 9
	E_STOCK_CATEGORY_STKC_SZ_JJ          = 10
	E_STOCK_CATEGORY_STKC_SH_QZ          = 11
	E_STOCK_CATEGORY_STKC_SZ_QZ          = 12
	E_STOCK_CATEGORY_STKC_SZ_SM          = 13
	E_STOCK_CATEGORY_STKC_NO_LO          = 14
	E_STOCK_CATEGORY_STKC_SH_ZS_IM9      = 15
	E_STOCK_CATEGORY_STKC_SH_ZS_IM6      = 16
	E_STOCK_CATEGORY_STKC_SZ_ALL_AG      = 17
	E_STOCK_CATEGORY_STKC_AH             = 20
	E_STOCK_CATEGORY_STKC_SH_TS          = 18
	E_STOCK_CATEGORY_STKC_SH_FX          = 19
	E_STOCK_CATEGORY_STKC_SZ_TS          = 21
	E_STOCK_CATEGORY_STKC_BK_HY          = 22
	E_STOCK_CATEGORY_STKC_BK_DQ          = 23
	E_STOCK_CATEGORY_STKC_BK_GN          = 24
	E_STOCK_CATEGORY_STKC_SH_HLTCDR      = 25
	E_STOCK_CATEGORY_STKC_SH_CDR         = 26
	E_STOCK_CATEGORY_STKC_SH_KCB         = 27
	E_STOCK_CATEGORY_STKC_SH_ZQHG        = 28
	E_STOCK_CATEGORY_STKC_SZ_ZQHG        = 29
	E_STOCK_CATEGORY_STKC_SH_PURC        = 30
	E_STOCK_CATEGORY_STKC_QH             = 31
	E_STOCK_CATEGORY_STKC_FOREX          = 32
	E_STOCK_CATEGORY_STKC_GWQH           = 33
	E_STOCK_CATEGORY_STKC_SH_ZB          = 34
	E_STOCK_CATEGORY_STKC_SZ_PURC        = 35
	E_STOCK_CATEGORY_STKC_SZ_GZAG        = 36
	E_STOCK_CATEGORY_STKC_SZ_GZGG        = 37
	E_STOCK_CATEGORY_STKC_SH_OTZQ        = 38
	E_STOCK_CATEGORY_STKC_SZ_OTZQ        = 39
	E_STOCK_CATEGORY_STKC_ALL_AG         = 40
	E_STOCK_CATEGORY_STKC_ALL_QZ         = 41
	E_STOCK_CATEGORY_STKC_ALL_ZQ         = 42
	E_STOCK_CATEGORY_STKC_SZ_ZQXQ        = 43
	E_STOCK_CATEGORY_STKC_SZ_ZQXQZS      = 44
	E_STOCK_CATEGORY_STKC_BJ_TSAG        = 45
	E_STOCK_CATEGORY_STKC_BJ_TSBG        = 46
	E_STOCK_CATEGORY_STKC_BJ_GPZQ        = 47
	E_STOCK_CATEGORY_STKC_BJ_YXG         = 48
	E_STOCK_CATEGORY_STKC_BJ_YYSG        = 49
	E_STOCK_CATEGORY_STKC_BJ_GQJL        = 50
	E_STOCK_CATEGORY_STKC_GGT_SH         = 51
	E_STOCK_CATEGORY_STKC_GGT_SZ         = 52
	E_STOCK_CATEGORY_STKC_GGT_SHSZ       = 53
	E_STOCK_CATEGORY_STKC_GGT_NOT_VALID  = 54
	E_STOCK_CATEGORY_STKC_ALL_IE         = 55
	E_STOCK_CATEGORY_STKC_ALL_IS         = 56
	E_STOCK_CATEGORY_STKC_ALL_CV         = 57
	E_STOCK_CATEGORY_STKC_ALL_CR         = 58
	E_STOCK_CATEGORY_STKC_ALL_R1         = 59
	E_STOCK_CATEGORY_STKC_ALL_R2         = 60
	E_STOCK_CATEGORY_STKC_ALL_R3         = 61
	E_STOCK_CATEGORY_STKC_ALL_R4         = 62
	E_STOCK_CATEGORY_STKC_ALL_OS         = 63
	E_STOCK_CATEGORY_STKC_ALL_OCR        = 64
	E_STOCK_CATEGORY_STKC_ALL_OD         = 66
	E_STOCK_CATEGORY_STKC_ALL_OT         = 67
	E_STOCK_CATEGORY_STKC_ALL_OV         = 68
	E_STOCK_CATEGORY_STKC_ALL_ECR        = 69
	E_STOCK_CATEGORY_STKC_HK_STOCK       = 71
	E_STOCK_CATEGORY_STKC_ALL_BDW        = 72
	E_STOCK_CATEGORY_STKC_SZ_RIGHT       = 75
	E_STOCK_CATEGORY_STKC_HK_CY          = 77
	E_STOCK_CATEGORY_STKC_SZ_CY          = 80
	E_STOCK_CATEGORY_STKC_SZ_SB          = 81
	E_STOCK_CATEGORY_STKC_BJ_FXYW        = 83
	E_STOCK_CATEGORY_STKC_BJ_ZS          = 84
	E_STOCK_CATEGORY_STKC_BJ_ZQ          = 85
	E_STOCK_CATEGORY_STKC_BK_TS          = 86
	E_STOCK_CATEGORY_STKC_BJ_KZZ         = 87
	E_STOCK_CATEGORY_STKC_BH             = 88
	E_STOCK_CATEGORY_STKC_UNKNOWN        = 99
	E_STOCK_CATEGORY_STKC_HK             = 101
	E_STOCK_CATEGORY_STKC_QH_ZSQQ        = 165
	E_STOCK_CATEGORY_STKC_QH_ZSQQ_C      = 166
	E_STOCK_CATEGORY_STKC_QH_ZSQQ_P      = 167
	E_STOCK_CATEGORY_STKC_QH_GZQH        = 168
	E_STOCK_CATEGORY_STKC_QH_TBQH        = 169
	E_STOCK_CATEGORY_STKC_QH_ALL         = 170
	E_STOCK_CATEGORY_STKC_SH_ISP         = 171
	E_STOCK_CATEGORY_STKC_SH_OPTION      = 172
	E_STOCK_CATEGORY_STKC_SH_OPTION_C    = 173
	E_STOCK_CATEGORY_STKC_SH_OPTION_P    = 174
	E_STOCK_CATEGORY_STKC_ALL_HSJ        = 199
	E_STOCK_CATEGORY_STKC_M_OTHER        = 200
	E_STOCK_CATEGORY_STKC_M_FOREX        = 201
	E_STOCK_CATEGORY_STKC_M_FUTURES      = 202
	E_STOCK_CATEGORY_STKC_M_METAL        = 203
	E_STOCK_CATEGORY_STKC_M_INDEX        = 204
	E_STOCK_CATEGORY_STKC_M_FUND         = 205
	E_STOCK_CATEGORY_STKC_M_HK           = 206
	E_STOCK_CATEGORY_STKC_M_US           = 207
	E_STOCK_CATEGORY_STKC_M_XSB          = 208
	E_STOCK_CATEGORY_STKC_M_COIN         = 209
	E_STOCK_CATEGORY_STKC_M_HKDARK       = 210
	E_STOCK_CATEGORY_STKC_M_FUTUREOPTION = 211
	E_STOCK_CATEGORY_STKC_M_FUTURECOMBI  = 212
)

type E_MARKET_CODE int32

const (
	E_MARKET_CODE_E_MARKET_SZ          = 0
	E_MARKET_CODE_E_MARKET_SH          = 1
	E_MARKET_CODE_E_MARKET_HK          = 2
	E_MARKET_CODE_E_MARKET_SF          = 3
	E_MARKET_CODE_E_MARKET_SC          = 4
	E_MARKET_CODE_E_MARKET_DC          = 5
	E_MARKET_CODE_E_MARKET_ZC          = 6
	E_MARKET_CODE_E_MARKET_BJ          = 7
	E_MARKET_CODE_E_MARKET_SJ          = 8
	E_MARKET_CODE_E_MARKET_LDJ         = 9
	E_MARKET_CODE_E_MARKET_TJ          = 10
	E_MARKET_CODE_E_MARKET_DY          = 11
	E_MARKET_CODE_E_MARKET_GJ          = 12
	E_MARKET_CODE_E_MARKET_NASDAQ      = 13
	E_MARKET_CODE_E_MARKET_NYSE        = 14
	E_MARKET_CODE_E_MARKET_AMEX        = 15
	E_MARKET_CODE_E_MARKET_HSI         = 16
	E_MARKET_CODE_E_MARKET_USI         = 17
	E_MARKET_CODE_E_MARKET_NK225       = 18
	E_MARKET_CODE_E_MARKET_KOSPI       = 19
	E_MARKET_CODE_E_MARKET_TWII        = 20
	E_MARKET_CODE_E_MARKET_STI         = 21
	E_MARKET_CODE_E_MARKET_KLSE        = 22
	E_MARKET_CODE_E_MARKET_SETI        = 23
	E_MARKET_CODE_E_MARKET_JKSE        = 24
	E_MARKET_CODE_E_MARKET_AORD        = 25
	E_MARKET_CODE_E_MARKET_NZSE        = 26
	E_MARKET_CODE_E_MARKET_SENSEX      = 27
	E_MARKET_CODE_E_MARKET_GSPTSE      = 28
	E_MARKET_CODE_E_MARKET_USD         = 29
	E_MARKET_CODE_E_MARKET_CAC         = 30
	E_MARKET_CODE_E_MARKET_DAX         = 31
	E_MARKET_CODE_E_MARKET_AEX         = 32
	E_MARKET_CODE_E_MARKET_OMX20       = 33
	E_MARKET_CODE_E_MARKET_BFX         = 34
	E_MARKET_CODE_E_MARKET_SSMI        = 35
	E_MARKET_CODE_E_MARKET_IBOVESPA    = 36
	E_MARKET_CODE_E_MARKET_RTS         = 37
	E_MARKET_CODE_E_MARKET_MIB         = 38
	E_MARKET_CODE_E_MARKET_FX          = 39
	E_MARKET_CODE_E_MARKET_FTSE        = 40
	E_MARKET_CODE_E_MARKET_COMEX       = 41
	E_MARKET_CODE_E_MARKET_LME         = 42
	E_MARKET_CODE_E_MARKET_NYMEX       = 43
	E_MARKET_CODE_E_MARKET_CBOT        = 44
	E_MARKET_CODE_E_MARKET_IPE         = 45
	E_MARKET_CODE_E_MARKET_FUND        = 46
	E_MARKET_CODE_E_MARKET_TB          = 47
	E_MARKET_CODE_E_MARKET_CNY         = 48
	E_MARKET_CODE_E_MARKET_XS          = 49
	E_MARKET_CODE_E_MARKET_DELAY_HK    = 50
	E_MARKET_CODE_E_MARKET_BS          = 51
	E_MARKET_CODE_E_MARKET_HT          = 52
	E_MARKET_CODE_E_MARKET_WT          = 53
	E_MARKET_CODE_E_MARKET_DSE         = 60
	E_MARKET_CODE_E_MARKET_SOUTH       = 61
	E_MARKET_CODE_E_MARKET_NORTH       = 62
	E_MARKET_CODE_E_MARKET_GGT         = 64
	E_MARKET_CODE_E_MARKET_HKDARK      = 65
	E_MARKET_CODE_E_MARKET_SGT         = 66
	E_MARKET_CODE_E_MARKET_HGT         = 67
	E_MARKET_CODE_E_MARKET_SZATP       = 68
	E_MARKET_CODE_E_MARKET_BH          = 69
	E_MARKET_CODE_E_MARKET_HKBLOCK     = 70
	E_MARKET_CODE_E_MARKET_BLOCK       = 71
	E_MARKET_CODE_E_MARKET_USBLOCK     = 72
	E_MARKET_CODE_E_MARKET_NASDAQ_PRE  = 73
	E_MARKET_CODE_E_MARKET_NYSE_PRE    = 74
	E_MARKET_CODE_E_MARKET_AMEX_PRE    = 75
	E_MARKET_CODE_E_MARKET_NASDAQ_POST = 76
	E_MARKET_CODE_E_MARKET_NYSE_POST   = 77
	E_MARKET_CODE_E_MARKET_AMEX_POST   = 78
	E_MARKET_CODE_E_MARKET_SHATP       = 88
	E_MARKET_CODE_E_MARKET_SC1         = 90
	E_MARKET_CODE_E_MARKET_SC2         = 91
	E_MARKET_CODE_E_MARKET_SC3         = 92
	E_MARKET_CODE_E_MARKET_SC4         = 93
	E_MARKET_CODE_E_MARKET_DC1         = 94
	E_MARKET_CODE_E_MARKET_DC2         = 95
	E_MARKET_CODE_E_MARKET_ZC1         = 96
	E_MARKET_CODE_E_MARKET_ZC2         = 97
	E_MARKET_CODE_E_MARKET_DC1OPTION   = 100
	E_MARKET_CODE_E_MARKET_ZC1OPTION   = 101
	E_MARKET_CODE_E_MARKET_SC1OPTION   = 102
	E_MARKET_CODE_E_MARKET_SC2OPTION   = 103
	E_MARKET_CODE_E_MARKET_SC3OPTION   = 104
	E_MARKET_CODE_E_MARKET_ZC1COMBI    = 110
	E_MARKET_CODE_E_MARKET_ZC2COMBI    = 111
	E_MARKET_CODE_E_MARKET_DC1COMBI    = 112
	E_MARKET_CODE_E_MARKET_DC2COMBI    = 113
)

type E_SC_CATEGORY int32

const (
	E_SC_CATEGORY_E_SC3_AU = 1
	E_SC_CATEGORY_E_SC3_AG = 2
	E_SC_CATEGORY_E_SC1_AL = 3
	E_SC_CATEGORY_E_SC2_BU = 4
	E_SC_CATEGORY_E_SC1_CU = 5
	E_SC_CATEGORY_E_SC2_FU = 6
	E_SC_CATEGORY_E_SC2_HC = 7
	E_SC_CATEGORY_E_SC1_PB = 8
	E_SC_CATEGORY_E_SC2_RB = 9
	E_SC_CATEGORY_E_SC2_RU = 10
	E_SC_CATEGORY_E_SC4_WR = 11
	E_SC_CATEGORY_E_SC1_ZN = 12
	E_SC_CATEGORY_E_SC1_NI = 13
	E_SC_CATEGORY_E_SC1_SN = 14
	E_SC_CATEGORY_E_SC3_SC = 15
	E_SC_CATEGORY_E_SC4_SS = 16
	E_SC_CATEGORY_E_SC2_NR = 17
	E_SC_CATEGORY_E_SC2_SP = 18
	E_SC_CATEGORY_E_SC2_LU = 19
	E_SC_CATEGORY_E_SC1_BC = 20
)

type E_DC_CATEGORY int32

const (
	E_DC_CATEGORY_E_DC2_BB = 1
	E_DC_CATEGORY_E_DC2_FB = 2
	E_DC_CATEGORY_E_DC1_A  = 3
	E_DC_CATEGORY_E_DC1_B  = 4
	E_DC_CATEGORY_E_DC1_C  = 5
	E_DC_CATEGORY_E_DC1_I  = 6
	E_DC_CATEGORY_E_DC2_JD = 7
	E_DC_CATEGORY_E_DC1_JM = 8
	E_DC_CATEGORY_E_DC1_L  = 9
	E_DC_CATEGORY_E_DC1_M  = 10
	E_DC_CATEGORY_E_DC1_P  = 11
	E_DC_CATEGORY_E_DC1_PP = 12
	E_DC_CATEGORY_E_DC1_V  = 13
	E_DC_CATEGORY_E_DC1_Y  = 14
	E_DC_CATEGORY_E_DC1_J  = 17
	E_DC_CATEGORY_E_DC1_CS = 18
	E_DC_CATEGORY_E_DC1_EG = 19
	E_DC_CATEGORY_E_DC1_EB = 20
	E_DC_CATEGORY_E_DC1_RR = 21
	E_DC_CATEGORY_E_DC1_PG = 22
	E_DC_CATEGORY_E_DC2_LH = 23
)

type E_ZC_CATEGORY int32

const (
	E_ZC_CATEGORY_E_ZC1_CF = 2
	E_ZC_CATEGORY_E_ZC1_FG = 3
	E_ZC_CATEGORY_E_ZC2_JR = 4
	E_ZC_CATEGORY_E_ZC2_LR = 5
	E_ZC_CATEGORY_E_ZC1_MA = 6
	E_ZC_CATEGORY_E_ZC1_OI = 8
	E_ZC_CATEGORY_E_ZC2_PM = 9
	E_ZC_CATEGORY_E_ZC2_RI = 10
	E_ZC_CATEGORY_E_ZC1_RM = 11
	E_ZC_CATEGORY_E_ZC2_RS = 12
	E_ZC_CATEGORY_E_ZC2_SM = 14
	E_ZC_CATEGORY_E_ZC2_SF = 13
	E_ZC_CATEGORY_E_ZC1_SR = 15
	E_ZC_CATEGORY_E_ZC1_TA = 16
	E_ZC_CATEGORY_E_ZC2_WH = 18
	E_ZC_CATEGORY_E_ZC1_ZC = 19
	E_ZC_CATEGORY_E_ZC2_CY = 20
	E_ZC_CATEGORY_E_ZC2_AP = 21
	E_ZC_CATEGORY_E_ZC2_UR = 22
	E_ZC_CATEGORY_E_ZC2_CJ = 23
	E_ZC_CATEGORY_E_ZC1_PF = 24
	E_ZC_CATEGORY_E_ZC1_SA = 25
	E_ZC_CATEGORY_E_ZC2_PK = 26
)

type E_HK_CATEGORY int32

const (
	E_HK_CATEGORY_E_HK_ZQ  = 66
	E_HK_CATEGORY_E_HK_NXZ = 67
	E_HK_CATEGORY_E_HK_JJ  = 70
	E_HK_CATEGORY_E_HK_CYB = 71
	E_HK_CATEGORY_E_HK_ZB  = 77
	E_HK_CATEGORY_E_HK_QZ  = 87
)

type E_US_CATEGORY int32

const (
	E_US_CATEGORY_E_US_ZQ     = 66
	E_US_CATEGORY_E_US_JJ     = 70
	E_US_CATEGORY_E_US_OTHRE  = 79
	E_US_CATEGORY_E_US_NORMAL = 83
)

type E_TB_CATEGORY int32

const (
	E_TB_CATEGORY_E_TB_LW       = 1
	E_TB_CATEGORY_E_TB_XYZR_A   = 2
	E_TB_CATEGORY_E_TB_ZSZR_A   = 3
	E_TB_CATEGORY_E_TB_XYZR_B   = 4
	E_TB_CATEGORY_E_TB_ZSZR_B   = 5
	E_TB_CATEGORY_E_TB_ZS       = 6
	E_TB_CATEGORY_E_TB_YZB      = 7
	E_TB_CATEGORY_E_TB_DSC      = 8
	E_TB_CATEGORY_E_TB_DGP      = 9
	E_TB_CATEGORY_E_TB_YXG      = 10
	E_TB_CATEGORY_E_TB_JJZRGP   = 11
	E_TB_CATEGORY_E_TB_LXJJZRGP = 12
	E_TB_CATEGORY_E_TB_JJZRQQ   = 13
	E_TB_CATEGORY_E_TB_ZXJJZRQQ = 14
	E_TB_CATEGORY_E_TB_YYSG     = 15
	E_TB_CATEGORY_E_TB_YYHG     = 16
	E_TB_CATEGORY_E_TB_FX       = 17
	E_TB_CATEGORY_E_TB_LWB      = 18
	E_TB_CATEGORY_E_TB_FXSG     = 19
	E_TB_CATEGORY_E_TB_ZQ       = 20
	E_TB_CATEGORY_E_TB_KZZ      = 21
	E_TB_CATEGORY_E_TB_JXC      = 33
)

type E_HKDARK_CATEGORY int32

const (
	E_HKDARK_CATEGORY_E_HKDARK_NORMAL = 1
	E_HKDARK_CATEGORY_E_HKDARK_TS     = 2
	E_HKDARK_CATEGORY_E_HKDARK_JJSS   = 3
)

type E_BUSS_TYPE int32

const (
	E_BUSS_TYPE_EBT_SH_A        = 0
	E_BUSS_TYPE_EBT_SH_B        = 1
	E_BUSS_TYPE_EBT_SZ_A        = 2
	E_BUSS_TYPE_EBT_SZ_B        = 3
	E_BUSS_TYPE_EBT_SH_ZQ       = 4
	E_BUSS_TYPE_EBT_SZ_ZQ       = 5
	E_BUSS_TYPE_EBT_A           = 6
	E_BUSS_TYPE_EBT_B           = 7
	E_BUSS_TYPE_EBT_ZQ          = 8
	E_BUSS_TYPE_EBT_JJ          = 9
	E_BUSS_TYPE_EBT_ZS_BK       = 11
	E_BUSS_TYPE_EBT_SZ_SM       = 12
	E_BUSS_TYPE_EBT_QZ          = 17
	E_BUSS_TYPE_EBT_SZ_CY       = 18
	E_BUSS_TYPE_EBT_M_BH        = 19
	E_BUSS_TYPE_EBT_M_DS        = 20
	E_BUSS_TYPE_EBT_M_ZS        = 21
	E_BUSS_TYPE_EBT_M_SQ        = 22
	E_BUSS_TYPE_EBT_ZJ          = 23
	E_BUSS_TYPE_EBT_M_SHJ       = 24
	E_BUSS_TYPE_EBT_M_GJJ       = 25
	E_BUSS_TYPE_EBT_M_TG        = 26
	E_BUSS_TYPE_EBT_SH_ZQHG     = 28
	E_BUSS_TYPE_EBT_SZ_ZQHG     = 29
	E_BUSS_TYPE_EBT_BLK_ALL     = 30
	E_BUSS_TYPE_EBT_BLK_DY      = 31
	E_BUSS_TYPE_EBT_BLK_HY      = 32
	E_BUSS_TYPE_EBT_BLK_GN      = 33
	E_BUSS_TYPE_EBT_M_DY        = 34
	E_BUSS_TYPE_EBT_M_GJ        = 35
	E_BUSS_TYPE_EBT_T_HK        = 36
	E_BUSS_TYPE_EBT_T_HK_ZB     = 37
	E_BUSS_TYPE_EBT_T_HK_CYB    = 38
	E_BUSS_TYPE_EBT_T_HK_ZQ     = 39
	E_BUSS_TYPE_EBT_T_HK_QZ     = 41
	E_BUSS_TYPE_EBT_T_HK_NXZ    = 42
	E_BUSS_TYPE_EBT_T_HK_JJ     = 43
	E_BUSS_TYPE_EBT_M_HSI       = 49
	E_BUSS_TYPE_EBT_M_US        = 50
	E_BUSS_TYPE_EBT_M_NASDAQ    = 51
	E_BUSS_TYPE_EBT_M_NYSE      = 52
	E_BUSS_TYPE_EBT_M_AMEX      = 53
	E_BUSS_TYPE_EBT_M_USI       = 54
	E_BUSS_TYPE_EBT_BJ_A        = 60
	E_BUSS_TYPE_EBT_BJ_ZS       = 61
	E_BUSS_TYPE_EBT_A_ALL       = 62
	E_BUSS_TYPE_EBT_BJ_ZQ       = 63
	E_BUSS_TYPE_EBT_BK_TS       = 70
	E_BUSS_TYPE_EBT_CDR_HLT     = 125
	E_BUSS_TYPE_EBT_SH_GGT      = 126
	E_BUSS_TYPE_EBT_SZ_GGT      = 127
	E_BUSS_TYPE_EBT_SHSZ_GGT    = 128
	E_BUSS_TYPE_EBT_QH_YP       = 129
	E_BUSS_TYPE_EBT_CDR         = 130
	E_BUSS_TYPE_EBT_KCB         = 131
	E_BUSS_TYPE_EBT_ZQHG        = 132
	E_BUSS_TYPE_EBT_A_KCB       = 133
	E_BUSS_TYPE_EBT_SH_CXQYGP   = 134
	E_BUSS_TYPE_EBT_OTZQ        = 135
	E_BUSS_TYPE_EBT_SHSZ_ZQHG   = 136
	E_BUSS_TYPE_EBT_ZQ_ALL      = 137
	E_BUSS_TYPE_EBT_ZS_000001   = 2000
	E_BUSS_TYPE_EBT_ZS_000002   = 2001
	E_BUSS_TYPE_EBT_ZS_000003   = 2002
	E_BUSS_TYPE_EBT_ZS_399001   = 2003
	E_BUSS_TYPE_EBT_ZS_399002   = 2004
	E_BUSS_TYPE_EBT_ZS_399003   = 2005
	E_BUSS_TYPE_EBT_ZS_399005   = 2006
	E_BUSS_TYPE_EBT_ZS_399006   = 2007
	E_BUSS_TYPE_EBT_ZS_399107   = 2008
	E_BUSS_TYPE_EBT_ZS_399108   = 2009
	E_BUSS_TYPE_EBT_SH_JJ       = 9100
	E_BUSS_TYPE_EBT_SZ_JJ       = 9101
	E_BUSS_TYPE_EBT_T_SC_CU     = 10000
	E_BUSS_TYPE_EBT_T_SC_AL     = 10001
	E_BUSS_TYPE_EBT_T_SC_ZN     = 10002
	E_BUSS_TYPE_EBT_T_SC_PB     = 10003
	E_BUSS_TYPE_EBT_T_SC_AU     = 10004
	E_BUSS_TYPE_EBT_T_SC_AG     = 10005
	E_BUSS_TYPE_EBT_T_SC_RB     = 10006
	E_BUSS_TYPE_EBT_T_SC_RU     = 10007
	E_BUSS_TYPE_EBT_T_SC_FU     = 10008
	E_BUSS_TYPE_EBT_T_SC_WR     = 10009
	E_BUSS_TYPE_EBT_T_SC_BU     = 10010
	E_BUSS_TYPE_EBT_T_SC_HC     = 10011
	E_BUSS_TYPE_EBT_T_SC_NI     = 10012
	E_BUSS_TYPE_EBT_T_SC_SN     = 10013
	E_BUSS_TYPE_EBT_T_SC_NR     = 10014
	E_BUSS_TYPE_EBT_T_SC_SP     = 10015
	E_BUSS_TYPE_EBT_T_DC_A      = 10100
	E_BUSS_TYPE_EBT_T_DC_M      = 10101
	E_BUSS_TYPE_EBT_T_DC_Y      = 10102
	E_BUSS_TYPE_EBT_T_DC_P      = 10103
	E_BUSS_TYPE_EBT_T_DC_C      = 10104
	E_BUSS_TYPE_EBT_T_DC_I      = 10105
	E_BUSS_TYPE_EBT_T_DC_JM     = 10106
	E_BUSS_TYPE_EBT_T_DC_J      = 10107
	E_BUSS_TYPE_EBT_T_DC_L      = 10108
	E_BUSS_TYPE_EBT_T_DC_V      = 10109
	E_BUSS_TYPE_EBT_T_DC_B      = 10110
	E_BUSS_TYPE_EBT_T_DC_JD     = 10111
	E_BUSS_TYPE_EBT_T_DC_FB     = 10112
	E_BUSS_TYPE_EBT_T_DC_BB     = 10113
	E_BUSS_TYPE_EBT_T_DC_PP     = 10114
	E_BUSS_TYPE_EBT_T_DC_CS     = 10115
	E_BUSS_TYPE_EBT_T_DC_PG     = 10116
	E_BUSS_TYPE_EBT_T_ZC_WH     = 10200
	E_BUSS_TYPE_EBT_T_ZC_OI     = 10201
	E_BUSS_TYPE_EBT_T_ZC_CF     = 10202
	E_BUSS_TYPE_EBT_T_ZC_SR     = 10203
	E_BUSS_TYPE_EBT_T_ZC_RI     = 10204
	E_BUSS_TYPE_EBT_T_ZC_TC     = 10205
	E_BUSS_TYPE_EBT_T_ZC_TA     = 10206
	E_BUSS_TYPE_EBT_T_ZC_FG     = 10207
	E_BUSS_TYPE_EBT_T_ZC_MA     = 10208
	E_BUSS_TYPE_EBT_T_ZC_RM     = 10209
	E_BUSS_TYPE_EBT_T_ZC_RS     = 10210
	E_BUSS_TYPE_EBT_T_ZC_PM     = 10211
	E_BUSS_TYPE_EBT_T_ZC_JR     = 10212
	E_BUSS_TYPE_EBT_T_ZC_LR     = 10213
	E_BUSS_TYPE_EBT_T_ZC_SM     = 10214
	E_BUSS_TYPE_EBT_T_ZC_SF     = 10215
	E_BUSS_TYPE_EBT_M_FUND      = 10350
	E_BUSS_TYPE_EBT_M_CBOT      = 10400
	E_BUSS_TYPE_EBT_M_COMEX     = 10401
	E_BUSS_TYPE_EBT_M_NYMEX     = 10402
	E_BUSS_TYPE_EBT_M_LME       = 10403
	E_BUSS_TYPE_EBT_M_FX        = 10410
	E_BUSS_TYPE_EBT_M_USD       = 10411
	E_BUSS_TYPE_EBT_M_CNY       = 10412
	E_BUSS_TYPE_EBT_M_DSE       = 10413
	E_BUSS_TYPE_EBT_ZS          = 10422
	E_BUSS_TYPE_EBT_SH_ZS       = 10423
	E_BUSS_TYPE_EBT_SZ_ZS       = 10424
	E_BUSS_TYPE_EBT_TB          = 10438
	E_BUSS_TYPE_EBT_TB_ZS       = 10439
	E_BUSS_TYPE_EBT_TB_ZSZR     = 10440
	E_BUSS_TYPE_EBT_TB_XYZR     = 10441
	E_BUSS_TYPE_EBT_TB_LW       = 10442
	E_BUSS_TYPE_EBT_TB_DSC      = 10443
	E_BUSS_TYPE_EBT_TB_DGP      = 10444
	E_BUSS_TYPE_EBT_TB_YZB      = 10445
	E_BUSS_TYPE_EBT_TB_ZQ       = 10446
	E_BUSS_TYPE_EBT_TB_KZZ      = 10447
	E_BUSS_TYPE_EBT_M_XS        = 10500
	E_BUSS_TYPE_EBT_M_DS_SUB    = 10550
	E_BUSS_TYPE_EBT_M_ZS_SUB    = 10551
	E_BUSS_TYPE_EBT_M_SQ_SUB    = 10552
	E_BUSS_TYPE_EBT_M_INDEX     = 10553
	E_BUSS_TYPE_EBT_M_SGT       = 10554
	E_BUSS_TYPE_EBT_M_HGT       = 10555
	E_BUSS_TYPE_EBT_T_SC_ENERGY = 10580
	E_BUSS_TYPE_EBT_T_SUB       = 12000
	E_BUSS_TYPE_EBT_T_A_SUB     = 12001
	E_BUSS_TYPE_EBT_T_M_SUB     = 12002
)

type E_CUSTOM_TYPE int32

const (
	E_CUSTOM_TYPE_ECT_QH_ZLHY              = 1
	E_CUSTOM_TYPE_ECT_QH_MAIN_HY           = 2
	E_CUSTOM_TYPE_ECT_QH_MAIN_HY_YESTERDAY = 3
)

type E_SORT_METHOD int32

const (
	E_SORT_METHOD_E_SORT_DEFAULT = 0
	E_SORT_METHOD_E_SORT_ASCEND  = 1
	E_SORT_METHOD_E_SORT_DESCEN  = 2
)

type E_MF_RANK_DAY int32

const (
	E_MF_RANK_DAY_EMR_DAY_1  = 1
	E_MF_RANK_DAY_EMR_DAY_3  = 3
	E_MF_RANK_DAY_EMR_DAY_5  = 5
	E_MF_RANK_DAY_EMR_DAY_10 = 10
)

type E_MF_RANK_SORT_COLUMN int32

const (
	E_MF_RANK_SORT_COLUMN_EMRC_CODE          = 1
	E_MF_RANK_SORT_COLUMN_EMRC_NAME          = 2
	E_MF_RANK_SORT_COLUMN_EMRC_NOWPRICE      = 3
	E_MF_RANK_SORT_COLUMN_EMRC_CHG           = 4
	E_MF_RANK_SORT_COLUMN_EMRC_CHANGE        = 5
	E_MF_RANK_SORT_COLUMN_EMRC_DAY_ZLLR      = 6
	E_MF_RANK_SORT_COLUMN_EMRC_DAY_ZLZB      = 7
	E_MF_RANK_SORT_COLUMN_EMRC_DAY_SHLR      = 8
	E_MF_RANK_SORT_COLUMN_EMRC_DAY_SHZB      = 9
	E_MF_RANK_SORT_COLUMN_EMRC_DAY_CDDZJLR   = 10
	E_MF_RANK_SORT_COLUMN_EMRC_DAY_CDDZJZB   = 11
	E_MF_RANK_SORT_COLUMN_EMRC_DAY_DDZJLR    = 12
	E_MF_RANK_SORT_COLUMN_EMRC_DAY_DDZJZB    = 13
	E_MF_RANK_SORT_COLUMN_EMRC_DAY_ZDZJLR    = 14
	E_MF_RANK_SORT_COLUMN_EMRC_DAY_ZDZJZB    = 15
	E_MF_RANK_SORT_COLUMN_EMRC_DAY_XDZJLR    = 16
	E_MF_RANK_SORT_COLUMN_EMRC_DAY_XDZJZB    = 17
	E_MF_RANK_SORT_COLUMN_EMRC_3DAY_ZLLR     = 18
	E_MF_RANK_SORT_COLUMN_EMRC_3DAY_ZLZB     = 19
	E_MF_RANK_SORT_COLUMN_EMRC_3DAY_SHLR     = 20
	E_MF_RANK_SORT_COLUMN_EMRC_3DAY_SHZB     = 21
	E_MF_RANK_SORT_COLUMN_EMRC_3DAY_CDDZJLR  = 22
	E_MF_RANK_SORT_COLUMN_EMRC_3DAY_CDDZJZB  = 23
	E_MF_RANK_SORT_COLUMN_EMRC_3DAY_DDZJLR   = 24
	E_MF_RANK_SORT_COLUMN_EMRC_3DAY_DDZJZB   = 25
	E_MF_RANK_SORT_COLUMN_EMRC_3DAY_ZDZJLR   = 26
	E_MF_RANK_SORT_COLUMN_EMRC_3DAY_ZDZJZB   = 27
	E_MF_RANK_SORT_COLUMN_EMRC_3DAY_XDZJLR   = 28
	E_MF_RANK_SORT_COLUMN_EMRC_3DAY_XDZJZB   = 29
	E_MF_RANK_SORT_COLUMN_EMRC_5DAY_ZLLR     = 30
	E_MF_RANK_SORT_COLUMN_EMRC_5DAY_ZLZB     = 31
	E_MF_RANK_SORT_COLUMN_EMRC_5DAY_SHLR     = 32
	E_MF_RANK_SORT_COLUMN_EMRC_5DAY_SHZB     = 33
	E_MF_RANK_SORT_COLUMN_EMRC_5DAY_CDDZJLR  = 34
	E_MF_RANK_SORT_COLUMN_EMRC_5DAY_CDDZJZB  = 35
	E_MF_RANK_SORT_COLUMN_EMRC_5DAY_DDZJLR   = 36
	E_MF_RANK_SORT_COLUMN_EMRC_5DAY_DDZJZB   = 37
	E_MF_RANK_SORT_COLUMN_EMRC_5DAY_ZDZJLR   = 38
	E_MF_RANK_SORT_COLUMN_EMRC_5DAY_ZDZJZB   = 39
	E_MF_RANK_SORT_COLUMN_EMRC_5DAY_XDZJLR   = 40
	E_MF_RANK_SORT_COLUMN_EMRC_5DAY_XDZJZB   = 41
	E_MF_RANK_SORT_COLUMN_EMRC_10DAY_ZLLR    = 42
	E_MF_RANK_SORT_COLUMN_EMRC_10DAY_ZLZB    = 43
	E_MF_RANK_SORT_COLUMN_EMRC_10DAY_SHLR    = 44
	E_MF_RANK_SORT_COLUMN_EMRC_10DAY_SHZB    = 45
	E_MF_RANK_SORT_COLUMN_EMRC_10DAY_CDDZJLR = 46
	E_MF_RANK_SORT_COLUMN_EMRC_10DAY_CDDZJZB = 47
	E_MF_RANK_SORT_COLUMN_EMRC_10DAY_DDZJLR  = 48
	E_MF_RANK_SORT_COLUMN_EMRC_10DAY_DDZJZB  = 49
	E_MF_RANK_SORT_COLUMN_EMRC_10DAY_ZDZJLR  = 50
	E_MF_RANK_SORT_COLUMN_EMRC_10DAY_ZDZJZB  = 51
	E_MF_RANK_SORT_COLUMN_EMRC_10DAY_XDZJLR  = 52
	E_MF_RANK_SORT_COLUMN_EMRC_10DAY_XDZJZB  = 53
	E_MF_RANK_SORT_COLUMN_EMRC_3MIN_ZLLR     = 54
	E_MF_RANK_SORT_COLUMN_EMRC_3MIN_ZLZB     = 55
	E_MF_RANK_SORT_COLUMN_EMRC_3MIN_SHLR     = 56
	E_MF_RANK_SORT_COLUMN_EMRC_3MIN_SHZB     = 57
	E_MF_RANK_SORT_COLUMN_EMRC_3MIN_CDDZJLR  = 58
	E_MF_RANK_SORT_COLUMN_EMRC_3MIN_CDDZJZB  = 59
	E_MF_RANK_SORT_COLUMN_EMRC_3MIN_DDZJLR   = 60
	E_MF_RANK_SORT_COLUMN_EMRC_3MIN_DDZJZB   = 61
	E_MF_RANK_SORT_COLUMN_EMRC_3MIN_ZDZJLR   = 62
	E_MF_RANK_SORT_COLUMN_EMRC_3MIN_ZDZJZB   = 63
	E_MF_RANK_SORT_COLUMN_EMRC_3MIN_XDZJLR   = 64
	E_MF_RANK_SORT_COLUMN_EMRC_3MIN_XDZJZB   = 65
	E_MF_RANK_SORT_COLUMN_EMRC_5MIN_ZLLR     = 66
	E_MF_RANK_SORT_COLUMN_EMRC_5MIN_ZLZB     = 67
	E_MF_RANK_SORT_COLUMN_EMRC_5MIN_SHLR     = 68
	E_MF_RANK_SORT_COLUMN_EMRC_5MIN_SHZB     = 69
	E_MF_RANK_SORT_COLUMN_EMRC_5MIN_CDDZJLR  = 70
	E_MF_RANK_SORT_COLUMN_EMRC_5MIN_CDDZJZB  = 71
	E_MF_RANK_SORT_COLUMN_EMRC_5MIN_DDZJLR   = 72
	E_MF_RANK_SORT_COLUMN_EMRC_5MIN_DDZJZB   = 73
	E_MF_RANK_SORT_COLUMN_EMRC_5MIN_ZDZJLR   = 74
	E_MF_RANK_SORT_COLUMN_EMRC_5MIN_ZDZJZB   = 75
	E_MF_RANK_SORT_COLUMN_EMRC_5MIN_XDZJLR   = 76
	E_MF_RANK_SORT_COLUMN_EMRC_5MIN_XDZJZB   = 77
	E_MF_RANK_SORT_COLUMN_EMRC_10MIN_ZLLR    = 78
	E_MF_RANK_SORT_COLUMN_EMRC_10MIN_ZLZB    = 79
	E_MF_RANK_SORT_COLUMN_EMRC_10MIN_SHLR    = 80
	E_MF_RANK_SORT_COLUMN_EMRC_10MIN_SHZB    = 81
	E_MF_RANK_SORT_COLUMN_EMRC_10MIN_CDDZJLR = 82
	E_MF_RANK_SORT_COLUMN_EMRC_10MIN_CDDZJZB = 83
	E_MF_RANK_SORT_COLUMN_EMRC_10MIN_DDZJLR  = 84
	E_MF_RANK_SORT_COLUMN_EMRC_10MIN_DDZJZB  = 85
	E_MF_RANK_SORT_COLUMN_EMRC_10MIN_ZDZJLR  = 86
	E_MF_RANK_SORT_COLUMN_EMRC_10MIN_ZDZJZB  = 87
	E_MF_RANK_SORT_COLUMN_EMRC_10MIN_XDZJLR  = 88
	E_MF_RANK_SORT_COLUMN_EMRC_10MIN_XDZJZB  = 89
	E_MF_RANK_SORT_COLUMN_EMRC_30MIN_ZLLR    = 90
	E_MF_RANK_SORT_COLUMN_EMRC_30MIN_ZLZB    = 91
	E_MF_RANK_SORT_COLUMN_EMRC_30MIN_SHLR    = 92
	E_MF_RANK_SORT_COLUMN_EMRC_30MIN_SHZB    = 93
	E_MF_RANK_SORT_COLUMN_EMRC_30MIN_CDDZJLR = 94
	E_MF_RANK_SORT_COLUMN_EMRC_30MIN_CDDZJZB = 95
	E_MF_RANK_SORT_COLUMN_EMRC_30MIN_DDZJLR  = 96
	E_MF_RANK_SORT_COLUMN_EMRC_30MIN_DDZJZB  = 97
	E_MF_RANK_SORT_COLUMN_EMRC_30MIN_ZDZJLR  = 98
	E_MF_RANK_SORT_COLUMN_EMRC_30MIN_ZDZJZB  = 99
	E_MF_RANK_SORT_COLUMN_EMRC_30MIN_XDZJLR  = 100
	E_MF_RANK_SORT_COLUMN_EMRC_30MIN_XDZJZB  = 101
	E_MF_RANK_SORT_COLUMN_EMRC_60MIN_ZLLR    = 102
	E_MF_RANK_SORT_COLUMN_EMRC_60MIN_ZLZB    = 103
	E_MF_RANK_SORT_COLUMN_EMRC_60MIN_SHLR    = 104
	E_MF_RANK_SORT_COLUMN_EMRC_60MIN_SHZB    = 105
	E_MF_RANK_SORT_COLUMN_EMRC_60MIN_CDDZJLR = 106
	E_MF_RANK_SORT_COLUMN_EMRC_60MIN_CDDZJZB = 107
	E_MF_RANK_SORT_COLUMN_EMRC_60MIN_DDZJLR  = 108
	E_MF_RANK_SORT_COLUMN_EMRC_60MIN_DDZJZB  = 109
	E_MF_RANK_SORT_COLUMN_EMRC_60MIN_ZDZJLR  = 110
	E_MF_RANK_SORT_COLUMN_EMRC_60MIN_ZDZJZB  = 111
	E_MF_RANK_SORT_COLUMN_EMRC_60MIN_XDZJLR  = 112
	E_MF_RANK_SORT_COLUMN_EMRC_60MIN_XDZJZB  = 113
)

type E_DDERANK_SORT_COLUMN int32

const (
	E_DDERANK_SORT_COLUMN_E_DDERANK_CODE         = 1
	E_DDERANK_SORT_COLUMN_E_DDERANK_NAME         = 2
	E_DDERANK_SORT_COLUMN_E_DDERANK_NOWPRICE     = 3
	E_DDERANK_SORT_COLUMN_E_DDERANK_CHG          = 4
	E_DDERANK_SORT_COLUMN_E_DDERANK_TURNOVERRATE = 5
	E_DDERANK_SORT_COLUMN_E_DDERANK_DDX          = 6
	E_DDERANK_SORT_COLUMN_E_DDERANK_DDY          = 7
	E_DDERANK_SORT_COLUMN_E_DDERANK_DDZ          = 8
	E_DDERANK_SORT_COLUMN_E_DDERANK_DDF          = 9
	E_DDERANK_SORT_COLUMN_E_DDERANK_DDX5         = 10
	E_DDERANK_SORT_COLUMN_E_DDERANK_DDY5         = 11
	E_DDERANK_SORT_COLUMN_E_DDERANK_DDX60        = 12
	E_DDERANK_SORT_COLUMN_E_DDERANK_DDY60        = 13
)

type E_STOCK_ORDER_TYPE int32

const (
	E_STOCK_ORDER_TYPE_E_STOCK_SUPER_BUY             = 0
	E_STOCK_ORDER_TYPE_E_STOCK_SUPER_SELL            = 1
	E_STOCK_ORDER_TYPE_E_STOCK_UP_STOP               = 2
	E_STOCK_ORDER_TYPE_E_STOCK_DOWN_STOP             = 3
	E_STOCK_ORDER_TYPE_E_STOCK_OPEN_UP_STOP          = 4
	E_STOCK_ORDER_TYPE_E_STOCK_OPEN_DOWN_STOP        = 5
	E_STOCK_ORDER_TYPE_E_STOCK_POST_LARGE_BUY        = 6
	E_STOCK_ORDER_TYPE_E_STOCK_POST_LARGE_SELL       = 7
	E_STOCK_ORDER_TYPE_E_STOCK_SUPER_LARGE_BUY       = 8
	E_STOCK_ORDER_TYPE_E_STOCK_SUPER_LARGE_SELL      = 9
	E_STOCK_ORDER_TYPE_E_STOCK_LARGE_BUY_IN          = 14
	E_STOCK_ORDER_TYPE_E_STOCK_LAGRGE_SELL_OUT       = 15
	E_STOCK_ORDER_TYPE_E_STOCK_BUY_FEN_DAN           = 16
	E_STOCK_ORDER_TYPE_E_STOCK_SELL_FEN_DAN          = 17
	E_STOCK_ORDER_TYPE_E_STOCK_ROCKET_RUSH           = 22
	E_STOCK_ORDER_TYPE_E_STOCK_QUICK_BUCKUP          = 23
	E_STOCK_ORDER_TYPE_E_STOCK_HIGH_DIVING           = 24
	E_STOCK_ORDER_TYPE_E_STOCK_QUICK_DOWN            = 25
	E_STOCK_ORDER_TYPE_E_STOCK_CANCEL_BUY            = 26
	E_STOCK_ORDER_TYPE_E_STOCK_CANCEL_SELL           = 27
	E_STOCK_ORDER_TYPE_E_STOCK_RADAR                 = 51
	E_STOCK_ORDER_TYPE_E_STOCK_PAD_ORDER             = 55
	E_STOCK_ORDER_TYPE_E_STOCK_PRESS_ORDER           = 56
	E_STOCK_ORDER_TYPE_E_STOCK_CLIP_ORDER            = 57
	E_STOCK_ORDER_TYPE_E_STOCK_HEDGE_ORDER           = 58
	E_STOCK_ORDER_TYPE_E_STOCK_JUMP_PRICE_DOWN_ORDER = 59
	E_STOCK_ORDER_TYPE_E_STOCK_JUMP_PRICE_UP_ORDER   = 60
	E_STOCK_ORDER_TYPE_E_STOCK_AUCTION_CANCEL_BUY    = 61
	E_STOCK_ORDER_TYPE_E_STOCK_AUCTION_CANCEL_SELL   = 62
	E_STOCK_ORDER_TYPE_E_STOCK_SHADOWLESS_BUY        = 63
	E_STOCK_ORDER_TYPE_E_STOCK_SHADOWLESS_SELL       = 64
	E_STOCK_ORDER_TYPE_E_STOCK_MAIN_TURNOVER_BUY     = 65
	E_STOCK_ORDER_TYPE_E_STOCK_MAIN_TURNOVER_SELL    = 66
	E_STOCK_ORDER_TYPE_E_STOCK_TAKEALL_BUY           = 67
	E_STOCK_ORDER_TYPE_E_STOCK_TAKEALL_SELL          = 68
	E_STOCK_ORDER_TYPE_E_STOCK_SUPER_PICK            = 69
	E_STOCK_ORDER_TYPE_E_STOCK_SUPER_CRACK           = 70
	E_STOCK_ORDER_TYPE_E_STOCK_SUPER_MAIN_BUY        = 71
	E_STOCK_ORDER_TYPE_E_STOCK_SUPER_MAIN_SELL       = 72
	E_STOCK_ORDER_TYPE_E_STOCK_FRONTLINE_BUY         = 73
	E_STOCK_ORDER_TYPE_E_STOCK_FRONTLINE_SELL        = 74
	E_STOCK_ORDER_TYPE_E_STOCK_ORDER_ALL             = 99
)

type E_SZFY_ORDER_TYPE int32

const (
	E_SZFY_ORDER_TYPE_E_SZFY_TIMES = 0
	E_SZFY_ORDER_TYPE_E_SZFY_VOL   = 1
	E_SZFY_ORDER_TYPE_E_SZFY_AMT   = 2
)

type E_COM_ORDER_TYPE int32

const (
	E_COM_ORDER_TYPE_E_COT_TLJ = 0
	E_COM_ORDER_TYPE_E_COT_DJ  = 1
	E_COM_ORDER_TYPE_E_COT_ZL  = 2
)

type E_SZFYCOM_ORDER_TYPE int32

const (
	E_SZFYCOM_ORDER_TYPE_E_SZFYCOM_CODE       = 0
	E_SZFYCOM_ORDER_TYPE_E_SZFYCOM_PRICE      = 1
	E_SZFYCOM_ORDER_TYPE_E_SZFYCOM_CHG        = 2
	E_SZFYCOM_ORDER_TYPE_E_SZFYCOM_BUY_COUNT  = 3
	E_SZFYCOM_ORDER_TYPE_E_SZFYCOM_BUY_VOL    = 4
	E_SZFYCOM_ORDER_TYPE_E_SZFYCOM_BUY_AMT    = 5
	E_SZFYCOM_ORDER_TYPE_E_SZFYCOM_SELL_COUNT = 6
	E_SZFYCOM_ORDER_TYPE_E_SZFYCOM_SELL_VOL   = 7
	E_SZFYCOM_ORDER_TYPE_E_SZFYCOM_SELL_AMT   = 8
)

type E_HQ_SORT_COLUMN int32

const (
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_CODE                = 1
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_NAME                = 2
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_YCLOSE              = 3
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_OPEN                = 4
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_HIGH                = 5
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_LOW                 = 6
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_NOWPRICE            = 7
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_BUY                 = 8
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SELL                = 9
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_VOLUME              = 10
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_AMOUNT              = 11
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_CURVOL              = 12
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_CHANGE              = 13
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_CHG                 = 14
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_AMPLITUDE           = 15
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_AVGPRICE            = 16
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_PREOPENINTEREST     = 17
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_PRESETTLEMENTPRICE  = 18
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_OPENINTEREST        = 19
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_TURNOVERRATE        = 20
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_LIANGBI             = 23
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MAIN_NET_BUY        = 24
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MAIN_RATIO          = 25
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_UP_SPEED            = 26
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_WEIBI               = 27
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_PERATIO             = 28
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_PRICERATIO          = 29
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_CURRENTMARKET       = 30
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_TOTALMARKET         = 31
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MGSY                = 32
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MGJZC               = 33
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_JZCSYL              = 34
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_YSZZL3Y             = 35
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_JLSZZL3Y            = 36
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_5DAYCHG             = 37
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_10DAYCHG            = 38
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_20DAYCHG            = 39
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MONTHCHG            = 40
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SEASONCHG           = 41
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_YEARCHG             = 42
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_THISYEARCHG         = 43
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MAIN_NET_BUY_5MIN   = 44
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_LZTZJ               = 45
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_LDTZJ               = 46
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_ZGJZ                = 47
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_PREMIUMRATE         = 48
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_TOTALCHG            = 49
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_INTERESTDAYINCREASE = 50
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_IOPV                = 51
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_OPENCHG             = 52
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_AUCLAST             = 53
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_AUCVOL              = 54
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_AUCTURN             = 55
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SUPPER_NET_BUY      = 56
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SUPPER_RATIO        = 57
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_BIG_NET_BUY         = 58
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_BIG_RATIO           = 59
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MIDDLE_NET_BUY      = 60
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MIDDLE_RATIO        = 61
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SMALL_NET_BUY       = 62
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SMALL_RATIO         = 63
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_HEADCODE_CHGRATIO   = 64
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_BLOCK_UPNUM         = 65
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_BLOCK_DOWNNUM       = 66
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_BLOCK_EQUALNUM      = 67
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_BLOCK_ZTNUM         = 68
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_BLOCK_UPNUM_RATIO   = 69
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_BLOCK_UPDAY         = 70
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MAIN_NET_BUY3       = 71
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MAIN_RATIO3         = 72
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SUPPER_NET_BUY3     = 73
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SUPPER_RATIO3       = 74
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_BIG_NET_BUY3        = 75
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_BIG_RATIO3          = 76
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MIDDLE_NET_BUY3     = 77
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MIDDLE_RATIO3       = 78
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SMALL_NET_BUY3      = 79
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SMALL_RATIO3        = 80
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MAIN_NET_BUY5       = 81
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MAIN_RATIO5         = 82
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SUPPER_NET_BUY5     = 83
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SUPPER_RATIO5       = 84
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_BIG_NET_BUY5        = 85
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_BIG_RATIO5          = 86
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MIDDLE_NET_BUY5     = 87
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MIDDLE_RATIO5       = 88
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SMALL_NET_BUY5      = 89
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SMALL_RATIO5        = 90
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MAIN_NET_BUY10      = 91
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MAIN_RATIO10        = 92
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SUPPER_NET_BUY10    = 93
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SUPPER_RATIO10      = 94
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_BIG_NET_BUY10       = 95
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_BIG_RATIO10         = 96
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MIDDLE_NET_BUY10    = 97
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_MIDDLE_RATIO10      = 98
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SMALL_NET_BUY10     = 99
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_SMALL_RATIO10       = 100
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_HTB                 = 101
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_GJB                 = 102
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_10DAY_HIGH_CHG      = 103
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_3DAYCHG             = 104
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_OPENAMONNT          = 105
	E_HQ_SORT_COLUMN_E_HQ_COLUMN_OPENVOLUME          = 106
)

type E_AH_SORT_COLUMN int32

const (
	E_AH_SORT_COLUMN_E_AH_PREMIUMRATE     = 1
	E_AH_SORT_COLUMN_E_AH_ACODE           = 2
	E_AH_SORT_COLUMN_E_AH_ANAME           = 3
	E_AH_SORT_COLUMN_E_AH_ANOWPRICE       = 4
	E_AH_SORT_COLUMN_E_AH_ACHG            = 5
	E_AH_SORT_COLUMN_E_AH_ACURMARKETVALUE = 6
	E_AH_SORT_COLUMN_E_AH_ATURNOVERRATE   = 7
	E_AH_SORT_COLUMN_E_AH_ATOTALHAND      = 8
	E_AH_SORT_COLUMN_E_AH_AOWNINDUSTRY    = 9
	E_AH_SORT_COLUMN_E_AH_HCODE           = 10
	E_AH_SORT_COLUMN_E_AH_HNAME           = 11
	E_AH_SORT_COLUMN_E_AH_HNOWPRICE       = 12
	E_AH_SORT_COLUMN_E_AH_HCHG            = 13
	E_AH_SORT_COLUMN_E_AH_HCURMARKETVALUE = 14
	E_AH_SORT_COLUMN_E_AH_HTURNOVERRATE   = 15
	E_AH_SORT_COLUMN_E_AH_HTOTALHAND      = 16
	E_AH_SORT_COLUMN_E_AH_HOWNINDUSTRY    = 17
)

type E_AM_STK_TYPE int32

const (
	E_AM_STK_TYPE_E_AM_STK_ALL = 0
	E_AM_STK_TYPE_E_AM_STK_AH  = 1
	E_AM_STK_TYPE_E_AM_STK_BH  = 2
	E_AM_STK_TYPE_E_AM_STK_UH  = 3
)

type E_SUGGEST_STOCK_TYPE int32

const (
	E_SUGGEST_STOCK_TYPE_E_SUGGEST_ALL          = 1
	E_SUGGEST_STOCK_TYPE_E_SUGGEST_STOCK_ONLY   = 2
	E_SUGGEST_STOCK_TYPE_E_SUGGEST_INDEX_ONLY   = 3
	E_SUGGEST_STOCK_TYPE_E_SUGGEST_STOCK_AB     = 4
	E_SUGGEST_STOCK_TYPE_E_SUGGEST_STOCK_BLOCK  = 5
	E_SUGGEST_STOCK_TYPE_E_SUGGEST_ZXJT_ST_ONLY = 6
	E_SUGGEST_STOCK_TYPE_E_SUGGEST_ZXJT_NO_ST   = 7
)

type E_SUGGEST_STOCK_EXT int32

const (
	E_SUGGEST_STOCK_EXT_E_SUGGEST_EXT_INS = -1
)

type E_JPJL_MATCH_TYPE int32

const (
	E_JPJL_MATCH_TYPE_E_MATCH_DEFAULT   = 0
	E_JPJL_MATCH_TYPE_E_MATCH_CODE_EX   = 1
	E_JPJL_MATCH_TYPE_E_MATCH_NAME_USED = 2
)

type E_STOCK_STATUS_TYPE int32

const (
	E_STOCK_STATUS_TYPE_E_NORMAL_STOCK  = 0
	E_STOCK_STATUS_TYPE_E_EXIT_STOCK    = 1
	E_STOCK_STATUS_TYPE_E_RISK_STOCK    = 2
	E_STOCK_STATUS_TYPE_E_DELETED_STOCK = 3
	E_STOCK_STATUS_TYPE_E_SUSPEND_STOCK = 4
	E_STOCK_STATUS_TYPE_E_UPING_STOCK   = 5
)

type E_RELATION_TYPE int32

const (
	E_RELATION_TYPE_E_RELATION_UNKNOWN = 0
	E_RELATION_TYPE_E_RELATION_YY      = 1
	E_RELATION_TYPE_E_RELATION_FX      = 2
	E_RELATION_TYPE_E_RELATION_KZZ     = 3
	E_RELATION_TYPE_E_RELATION_AH      = 4
	E_RELATION_TYPE_E_RELATION_PS      = 5
	E_RELATION_TYPE_E_RELATION_BH      = 6
	E_RELATION_TYPE_E_RELATION_UH      = 7
)

type E_CVT_DATA int32

const (
	E_CVT_DATA_CVT_NORMAL = 0
	E_CVT_DATA_CVT_MFL    = 1
	E_CVT_DATA_INDEX_DATA = 4096
)

type E_ZR_TYPE int32

const (
	E_ZR_TYPE_E_ZR_TYPE_UNKNOWN  = 0
	E_ZR_TYPE_E_ZR_TYPE_XYZR     = 1
	E_ZR_TYPE_E_ZR_TYPE_ZSZR     = 2
	E_ZR_TYPE_E_ZR_TYPE_LXJHJJZR = 3
	E_ZR_TYPE_E_ZR_TYPE_JHJJZR   = 4
	E_ZR_TYPE_E_ZR_TYPE_FX       = 5
)

type E_ZR_Status int32

const (
	E_ZR_Status_E_ZR_STATUS_UNKNOWN  = 0
	E_ZR_Status_E_ZR_STATUS_NORMAL   = 1
	E_ZR_Status_E_ZR_STATUS_SRGP     = 2
	E_ZR_Status_E_ZR_STATUS_XZGPGPZR = 3
	E_ZR_Status_E_ZR_STATUS_XJ       = 4
	E_ZR_Status_E_ZR_STATUS_SG       = 5
)

type E_FC_Type int32

const (
	E_FC_Type_E_FC_UNKNOWN = 0
	E_FC_Type_E_FC_CX      = 1
	E_FC_Type_E_FC_JC      = 2
	E_FC_Type_E_FC_JX      = 3
)

type E_TP_Type int32

const (
	E_TP_Type_E_TP_UNKNOWN = 0
	E_TP_Type_E_TP_NORMAL  = 1
	E_TP_Type_E_TP_T       = 2
	E_TP_Type_E_TP_H       = 3
)

type E_FX_Method int32

const (
	E_FX_Method_E_FX_METHOD_UNKNOWN = 0
	E_FX_Method_E_FX_METHOD_XJ      = 1
	E_FX_Method_E_FX_METHOD_DJ      = 2
	E_FX_Method_E_FX_METHOD_JJ      = 3
)

type E_CQCX_Status int32

const (
	E_CQCX_Status_E_CQCX_STATUS_UNKNOWN = 0
	E_CQCX_Status_E_CQCX_STATUS_NORMAL  = 1
	E_CQCX_Status_E_CQCX_STATUS_CQ      = 2
	E_CQCX_Status_E_CQCX_STATUS_CX      = 3
	E_CQCX_Status_E_CQCX_STATUS_CQCX    = 4
)

type E_BZ_Status int32

const (
	E_BZ_Status_E_BZ_UNKNOWN = 0
	E_BZ_Status_E_BZ_NODIFF  = 1
	E_BZ_Status_E_BZ_DIFF    = 2
)

type E_RANK_FILTER_TYPE int32

const (
	E_RANK_FILTER_TYPE_E_FILTER_ST           = 1
	E_RANK_FILTER_TYPE_E_FILTER_TS           = 2
	E_RANK_FILTER_TYPE_E_FILTER_NEWSTOCK     = 3
	E_RANK_FILTER_TYPE_E_FILTER_SUB_NEWSTOCK = 4
	E_RANK_FILTER_TYPE_E_FILTER_KCB          = 5
	E_RANK_FILTER_TYPE_E_FILTER_CYB          = 6
	E_RANK_FILTER_TYPE_E_FILTER_BJ           = 7
)

type E_AH_PREMIUM_TYPE int32

const (
	E_AH_PREMIUM_TYPE_E_PREMIUM_TYPE_NONE = 0
	E_AH_PREMIUM_TYPE_E_PREMIUM_TYPE_AH   = 1
	E_AH_PREMIUM_TYPE_E_PREMIUM_TYPE_HA   = 2
)

//const as define in taf jce
const (
	PUSH_VERSION int32 = 100
	PUSH_CANCEL  int32 = 110
)

// ClientInfo struct implement
type ClientInfo struct {
	codec.JceStructBase
	VGuid []int8 `json:"vGuid"`
	SXua  string `json:"sXua"`
}

func (st *ClientInfo) ResetDefault() {
	st.JceStructBase.ResetPrecision()
}

//ReadFrom reads  from _is and put into struct.
func (st *ClientInfo) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_is.SavePrecision()

	err, have, ty = _is.SkipToNoCheck(0, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.VGuid = make([]int8, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = _is.Read_int8(&st.VGuid[i0], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SIMPLE_LIST {

			err, _ = _is.SkipTo(codec.BYTE, 0, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			err = _is.Read_slice_int8(&st.VGuid, length, true)
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	err = _is.Read_string(&st.SXua, 1, false)
	if err != nil {
		return err
	}

	st.SetPrecision(_is.ResumePrecision())

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *ClientInfo) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ClientInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *ClientInfo) WriteTo(_os *codec.Buffer) error {
	var err error

	_os.SavePrecision(st.GetPrecision())

	err = _os.WriteHead(codec.SIMPLE_LIST, 0)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.BYTE, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.VGuid)), 0)
	if err != nil {
		return err
	}

	err = _os.Write_slice_int8(st.VGuid)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.SXua, 1)
	if err != nil {
		return err
	}

	_os.ResumePrecision()

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *ClientInfo) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

//Display this struct to a string.
func (st *ClientInfo) Display() string {
	var ret string
	ret = "{ "
	ret = ret + fmt.Sprint("vGuid:", st.VGuid)
	ret = ret + ",  "
	ret = ret + fmt.Sprint("sXua:", st.SXua)

	ret = ret + " }"
	return ret
}

// HeaderInfo struct implement
type HeaderInfo struct {
	codec.JceStructBase
	ShtMarket        int16           `json:"shtMarket"`
	StClientInfo     ClientInfo      `json:"stClientInfo"`
	ECompress        E_CLI_COMP_TYPE `json:"eCompress"`
	BCancelWithReqId bool            `json:"bCancelWithReqId"`
}

func (st *HeaderInfo) ResetDefault() {
	st.JceStructBase.ResetPrecision()
	st.ShtMarket = -1
	st.StClientInfo.ResetDefault()
	st.ECompress = E_CLI_COMP_TYPE_E_CLI_NO_COMP
	st.BCancelWithReqId = false
}

//ReadFrom reads  from _is and put into struct.
func (st *HeaderInfo) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_is.SavePrecision()

	err = _is.Read_int16(&st.ShtMarket, 0, false)
	if err != nil {
		return err
	}

	err = st.StClientInfo.ReadBlock(_is, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32((*int32)(&st.ECompress), 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_bool(&st.BCancelWithReqId, 3, false)
	if err != nil {
		return err
	}

	st.SetPrecision(_is.ResumePrecision())

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *HeaderInfo) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require HeaderInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *HeaderInfo) WriteTo(_os *codec.Buffer) error {
	var err error

	_os.SavePrecision(st.GetPrecision())

	err = _os.Write_int16(st.ShtMarket, 0)
	if err != nil {
		return err
	}

	err = st.StClientInfo.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(st.ECompress), 2)
	if err != nil {
		return err
	}

	err = _os.Write_bool(st.BCancelWithReqId, 3)
	if err != nil {
		return err
	}

	_os.ResumePrecision()

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *HeaderInfo) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

//Display this struct to a string.
func (st *HeaderInfo) Display() string {
	var ret string
	ret = "{ "
	ret = ret + fmt.Sprint("shtMarket:", st.ShtMarket)
	ret = ret + ",  "
	ret = ret + "stClientInfo:" + st.StClientInfo.Display()
	ret = ret + ",  "
	ret = ret + fmt.Sprint("eCompress:", st.ECompress)
	ret = ret + ",  "
	ret = ret + fmt.Sprint("bCancelWithReqId:", st.BCancelWithReqId)

	ret = ret + " }"
	return ret
}
